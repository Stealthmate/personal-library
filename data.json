[
    {
        "title": "Continuous Delivery",
        "subtitle": "Reliable Software Releases through Build, Test, and Deployment Automation",
        "authors": [
            "David Farley",
            "Jez Humble"
        ],
        "review": "Basically the \"what\", \"why\" and \"how\" of continuous integration (CI) and delivery (CD). Goes into great detail to explain why having a good CI/CD system is good and what benefits it gives with respect to software stability, e.g. number of bugs.",
        "tags": [
            "DevOps"
        ]
    },

    {
        "title": "Building Microservices",
        "subtitle": "Designing Fine-Grained Systems",
        "authors": [
            "Sam Newman"
        ],
        "review": "This is probably THE textbook on microservices. Honestly, some of the things here are understood only when you actually build a (bad) microservice system, but nevertheless it provides a lot of insight about why you might want to split certain systems, instead of having one giant one. It touches on a variety of topics, including communication, security, testing etc and it features pretty modern technologies, so it serves as a nice overview of the area.",
        "tags": [
            "Software Architecture"
        ]
    },
    {
        "title": "Test-Driven Development",
        "subtitle": "By Example",
        "authors": [
            "Kent Beck"
        ],
        "review": "Nice little book that teaches you how to write correct code without getting too stressed out. Very light-hearted and easy-going - you could read this in 1-minute bursts if you wanted to. This is a book about the nitty-gritty details of development, but Kent Beck manages to make it easy to read with his well-paced sense of humor.",
        "tags": [
            "Coding"
        ]
    },
    {
        "title": "Team Topologies",
        "subtitle": "Organizing Business and Technology Teams for Fast Flow",
        "authors": [
            "Mathew Skelton",
            "Manuel Pais"
        ],
        "review": "I think every manager should read this book, and every developer should also read it because it opens your eyes to a variety of problems when working with other people. it's mostly concerned with interaction between teams as opposed to individuals, but I still think everyone can benefit from recognizing the patterns described (especially when talkin to one's teammates or other teams).",
        "tags": [
            "Management"
        ]
    },
    {
        "title": "RADIUS",
        "subtitle": "Securing Public Access to Private Resources",
        "authors": [
            "Jonathan Hassell"
        ],
        "review": "On the surface, this is a textbook about the RADIUS protocol and the FreeRADIUS implementation. But it does such a good job of explaining the protocol, that reading it actually gives you insight about networking, authentication, authorization and security in general. If your job includes dealing with accounts, even if not related to networks per se, then I definitely recommend giving this a read.",
        "tags": [
            "Network",
            "Security"
        ]
    },
    {
        "title": "Domain-Driven Design",
        "subtitle": "Tackling Complexity in the Heart of Software",
        "authors": [
            "Eric Evans"
        ],
        "review": "Almost completely changed the way I think about designing systems. 99% of the time, it's not technology that is the problem - it is an unclear domain. Definitely recommended for anyone who wants to do more than \"just programming\".",
        "tags": [
            "Software Architecture"
        ]
    },
    {
        "title": "Clean Code",
        "subtitle": "A Handbook of Agile Software Craftsmanship",
        "authors": [
            "Robert Martin"
        ],
        "review": "A somewhat dogmatic approach to writing code that is, well, clean, but also readable, understandable and maintainable. From an experienced person's view, most concepts look obvious, yet it refreshes your mind to see them codified and backed by clear reasoning. On the other hand, a beginner will probably find a lot of insight reading this.",
        "tags": [
            "Coding"
        ]
    },
    {
        "title": "Clean Architecture",
        "subtitle": "A Craftsman's Guide to Software Structure and Design",
        "authors": [
            "Robert Martin"
        ],
        "review": "This book is basically a very detailed justification for spending time refining your code so that you have the correct abstractions, even if you don't produce new \"features\" in the process. It shows you the possibilities of well-designed systems, and more importantly, the pitfalls of badly-designed ones. The book gives an overview of common principles in the industry - from the well-known SOLID principles, to other lesser known but equally important ideas. To put it simply - if you want to sound more convincing when you tell your manager that you need to do some major refactoring, then this book is for you.",
        "tags": [
            "Software Architecture"
        ]
    },
    {
        "title": "The DevOps Handbook",
        "subtitle": "How to Create World-Class Agility, Reliability, and Security in Technology Organizations",
        "authors": [
            "Gene Kim",
            "Patrick Debois",
            "John Willis",
            "Jez Humble",
            "John Allspaw"
        ],
        "review": "If you want to make an argument for why splitting the company into Development and Operations is a bad idea - this book basically gives you that argument. It gives you all the reasons that make it worth to invest into solid and automated development, testing, deployment, monitoring and security mechanisms. If you're currently working in a company where DevOps is the norm, it might feel like the book is stating the obvious. On the other hand, if you're working in a company that's a little more traditional... well, this book will open your eyes.",
        "tags": [
            "DevOps"
        ]
    },
    {
        "title": "Peer Reviews in Software",
        "subtitle": "A Practical Guide",
        "authors": [
            "Karl E. Wiegers"
        ],
        "review": "Reading this in 2023 was interesting, since the book appears to be written at a time when the Internet was not really that much of a thing. That being said, the ideas inside are valuable regardless of the choice of technology - the book does a good job explaining why the concept of peer review in software is good. Then again, on the surface there are some points that could be considered \"old\" by today's standards - reviewing code printed on paper, having long and formal meetings where multiple people \"inspect\" the code, etc.",
        "tags": [
            "Coding",
            "Management"
        ]
    }
]